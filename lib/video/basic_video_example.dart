import 'dart:async';

import 'package:agora_rtc_engine/agora_rtc_engine.dart';
import 'package:flutter/material.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:agora_sdk_example/config/agora.config.dart' as config;

// Application class
class BasicVideoExample extends StatefulWidget {
  const BasicVideoExample({super.key});

  @override
  _BasicVideoExampleState createState() => _BasicVideoExampleState();
}

// Application state class
class _BasicVideoExampleState extends State<BasicVideoExample> {
  int? _remoteUid; // The UID of the remote user
  int? _localUid; // The UID of the local user
  bool _localUserJoined =
      false; // Indicates whether the local user has joined the channel
  late RtcEngine _engine; // The RtcEngine instances

  @override
  void initState() {
    super.initState();
    initAgora();
  }

  Future<void> initAgora() async {
    // Get microphone and camera permissions
    await [Permission.microphone, Permission.camera].request();

    // Create RtcEngine instance
    _engine = createAgoraRtcEngine();

    // Initialize RtcEngine and set the channel profile to live broadcasting
    await _engine.initialize(RtcEngineContext(
      appId: config.appId,
    ));

    // Add an event handler
    _engine.registerEventHandler(
      RtcEngineEventHandler(
        // Occurs when the local user joins the channel successfully
        onJoinChannelSuccess: (RtcConnection connection, int elapsed) {
          debugPrint('local user ${connection.localUid} joined');
          setState(() {
            _localUid = connection.localUid;
            _localUserJoined = true;
          });
        },
        // Occurs when a remote user join the channel
        onUserJoined: (RtcConnection connection, int remoteUid, int elapsed) {
          debugPrint("remote user $remoteUid joined");
          setState(() {
            _remoteUid = remoteUid;
          });
        },
        // Occurs when a remote user leaves the channel
        onUserOffline: (RtcConnection connection, int remoteUid,
            UserOfflineReasonType reason) {
          debugPrint("remote user $remoteUid left channel");
          setState(() {
            _remoteUid = null;
          });
        },
      ),
    );
    // Enable the video module
    await _engine.enableVideo();
    // Enable local video preview
    await _engine.startPreview();

    // Join a channel using a temporary token and channel name
    await _engine.joinChannel(
      token: config.token,
      channelId: config.channelId,
      options: const ChannelMediaOptions(
        // Automatically subscribe to all video streams
        autoSubscribeVideo: true,
        // Automatically subscribe to all audio streams
        autoSubscribeAudio: true,
        // Publish camera video
        publishCameraTrack: true,
        // Publish microphone audio
        publishMicrophoneTrack: true,
        // Set user role to clientRoleBroadcaster (broadcaster) or clientRoleAudience (audience)
        clientRoleType: ClientRoleType.clientRoleBroadcaster,
        // Set channel profile to channelProfileCommunication (1) or channelProfileLiveBroadcasting (0)
        channelProfile: ChannelProfileType.channelProfileCommunication,
      ),
      uid:
          0, // When you set uid to 0, a user name is randomly generated by the engine
    );
  }

  @override
  void dispose() {
    super.dispose();
    _dispose();
  }

  Future<void> _dispose() async {
    // Leave the channel
    await _engine.leaveChannel();
    // Release resources
    await _engine.release();
  }

  // Build the UI to display local and remote videos
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Agora Video Call'),
        ),
        body: Stack(
          children: [
            Align(
              alignment: Alignment.topRight,
              child: Padding(
                padding: const EdgeInsets.only(right: 10),
                child: Column(
                  children: [
                    Text("Remote User : ${_remoteUid ?? 'Not Joined'}"),
                    _remoteVideo(),
                  ],
                ),
              ),
            ),
            Align(
              alignment: Alignment.topLeft,
              child: Column(
                children: [
                  Text("Local User ; ${_localUid ?? 'Not Joined'}"),
                  SizedBox(
                    width: 100,
                    height: 150,
                    child: Center(
                      child: _localUserJoined
                          ? AgoraVideoView(
                              controller: VideoViewController(
                                rtcEngine: _engine,
                                canvas: const VideoCanvas(
                                  uid: 0,
                                ),
                              ),
                            )
                          : const CircularProgressIndicator(),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Widget to display remote video
  Widget _remoteVideo() {
    if (_remoteUid != null) {
      return SizedBox(
        width: 150,
        height: 150,
        child: AgoraVideoView(
          controller: VideoViewController.remote(
            rtcEngine: _engine,
            canvas: VideoCanvas(uid: _remoteUid),
            connection: RtcConnection(channelId: config.channelId),
          ),
        ),
      );
    } else {
      return const Text(
        'Please wait for remote user to join',
        textAlign: TextAlign.center,
      );
    }
  }
}
